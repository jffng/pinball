var obstacle = require('phys/obstacle'),
	Wall = obstacle.Wall,
	Flipper = require('phys/flipper');

var SCALE = 30;
var CANVAS_WIDTH = 1440;
var CANVAS_HEIGHT = 778;

var Level = function(levelType, world) {
	if(levelType == "test") {
		this.walls = new Wall(boundaries, world);

		// rightFlipper = new Flipper(50, 52, "right", "bottom");
		// leftFlipper = new Flipper(55, 52, "left", "bottom");

		this.obstacles = [];

		// $(window).on('click', function(e){
		// 	this.obstacles.push(new Can( e.clientX / SCALE, e.clientY / SCALE, undefined ));
		// });

		// $(window).on('keypress', function(e){
		// 	console.log(e.keyCode);
		// 	if(e.keyCode === 68 || e.keyCode === 100) rightFlipper.sawBody.ApplyTorque(100000); 
		// 	if(e.keyCode === 65 || e.keyCode === 97) leftFlipper.sawBody.ApplyTorque(-100000);
		// });

		// $(window).on('keyup', function(e){
		// 	console.log(e.keyCode);
		// 	if(e.keyCode === 68) rightFlipper.sawBody.ApplyTorque(-100000);
		// 	if(e.keyCode === 65) leftFlipper.sawBody.ApplyTorque(100000);
		// });

		// this.socket.on('obstacle', function (obstacleArray) {
		// 	if(obstacles.length < obstacleArray.length){
		// 		var numberOfObstaclesToAdd = obstacleArray.length - obstacles.length;
		// 		for( var i = 0; i < numberOfObstaclesToAdd; i++){
		// 			this.addObstacle(obstacleArray[i]);
		// 		}
		// 	}
		// 	else if ( obstacles.length > obstaclesArray.length ) {
		// 		// some code that identifies which obstacle needs removing and removes it
		// 	}
		// 	this.update
		// }
	}
};

var boundaries = {
// "arrow": { 
// 	id: "arrow", 
// 	x: 10, 
// 	y: 10, 
// 	polys: [
// 		[{x: -1, y: -1}, {x: 1, y: -1}, {x: 1, y: 1}, {x: -1, y: 1}], // box
// 		[{x: 1, y: -1.5}, {x: 2, y: 0}, {x: 1, y: 1.5} ]  // arrow 
// 		], 
// 	color: "green",
// 	friction: 0.2
// },
	"bottomWallLeftSegment": {
		id: "bottomWallL",
		x: -500,
		y: 100,
		halfWidth: 75,
		halfHeight: 0.5,
		friction: 2.0
	},
	"bottomWallRightSegment": {
		id: "bottomWallR",
		x: 50,
		y: 100,
		halfWidth: 75,
		halfHeight: 0.5,
		friction: 2.0
	},
	"topWall": {
		id: "topWall",
		x: 0,
		y: -100,
		halfWidth: 200,
		halfHeight: 1,
		friction: 1.0
	},
	"leftWall": {
		id: "leftWall",
		x: -100,
		y: 0,
		halfWidth: 0.5,
		halfHeight: 200,
		friction: 2.0
	},
	"rightWall": {
		id: "rightWall",
		x: 100,
		y: 0,
		halfWidth: 0.5,
		halfHeight: 200,
		friction: 2.0
	}
};

Level.prototype.addObstacle = function(stuff_about_the_obstacle) {

};



module.exports = Level;